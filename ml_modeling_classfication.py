# -*- coding: utf-8 -*-
"""ML_modeling_classfication.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1rzT_p-PxcSvqjg92XPrYLwr8loCy_w7y

# Data

Loading libraries
"""

from sklearn.datasets import make_classification
from sklearn.model_selection import train_test_split

"""creating train and test data using make_classfication for binary classfication having four features"""

X, y = make_classification(n_samples=200, n_features=4, n_informative=3, n_redundant=1,  n_classes=2, n_clusters_per_class=1, flip_y=0.01,shuffle=True)

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.30, random_state=7)

"""Size of trainset and testset (no. of records and no. of features)"""

print ("Trainset - Rows x Features is", X_train.shape)

print ("Testset Rows x Features is", X_test.shape)

"""## Machine Learning Model - Chosing linear SVM

importing linear support vector machine for classfication
"""

from sklearn.svm import LinearSVC

"""defining SVM model - loss function, penlty term, tolerenace, regularization parameter C , and iternations"""

clf = LinearSVC(random_state=0, loss='squared_hinge', C=0.01, tol=1e-4, penalty='l2', max_iter=500, dual=False)

"""Viewing linear SVM properties"""

vars(clf)

"""# Training Model on Data

Fit the training data
"""

clf.fit(X_train, y_train)

"""Weights assigned to each feature and constant for decision boundary"""

print(clf.coef_, clf.intercept_)

"""Evlauting primerly trained model on test set"""

from sklearn import metrics
y_pred = clf.predict(X_test)
print("Accuracy:",metrics.accuracy_score(y_test, y_pred))

"""# Hyperparameter Tuning

Tuning regularization parameter by incresing the value of C from 0.01 to 0.5
"""

clf = LinearSVC(random_state=0, loss='squared_hinge', C=0.8, tol=1e-4, penalty='l2', max_iter=100, dual=False)
clf.fit(X_train, y_train)
y_pred = clf.predict(X_test)
print("Accuracy:",metrics.accuracy_score(y_test, y_pred))

"""Understanding penalties by changing the penalty from L2 (squared) to L1 (absolute)"""

clf = LinearSVC(random_state=0, loss='squared_hinge', C=0.01, tol=1e-4, penalty='l1', max_iter=500, dual=False)
clf.fit(X_train, y_train)
print(clf.coef_, clf.intercept_)

"""Look the result aboove, onlt feature 1 is having real wights and other three are null

# Predictions - Error metrics

importing matplotlib for curve visualization
"""

import matplotlib.pyplot as plt

"""ROC Curve"""

metrics.plot_roc_curve(clf, X_test, y_test)
plt.show()

"""Confusion matrix"""

print (metrics.confusion_matrix(y_test, y_pred))

"""Precision (TP/TP+FP) and recall (TP/TP+FN)"""

print('precision: ', metrics.precision_score(y_test, y_pred, average='macro'))
print('recall: ', metrics.recall_score(y_test, y_pred, average='macro'))

